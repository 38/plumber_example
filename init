#!/bin/zsh
BUILDDIR=`pwd`/build
INSTALLDIR=`pwd`/installed
SOURCEDIR=`pwd`/dependencies

function print_help() {
	echo "Initialize the Plumber Isolated Environment"
	echo "--real[=<prefix>]                 Use the real environment, if prefix is missing use Plumber at /"
	echo "--javascript-prebuild[=<tarball>] Enable Javascript servlet support with the prebuild tarball"
	echo "--javascript[=<prefix>]           Enable Javascript servlet support"
	echo "--test                            Run test cases before we start the environment"
	echo "--recompile                       Recompile the code"
	echo "--reconfigure                     Reconfigure the Plumber source code"
	echo "--reinstall[=<prefix>]            Reinstall the Plumber environment, if prefix specified, use the given prefix"
	echo "--remove                          Remove all the generated file"
	echo "--commit=<tag>                    Use the given version number of Plumber"
	echo "--sync                            Sync the Plumber code"
	echo "--shell=<shell-command>           Instead of using zsh, use the given shell"
	echo "--cc=<C-compiler>                 Use the given C compiler rather than GCC"
	echo "--cxx=<C++-compiler>              Use the given C++ compiler rather than G++"
	echo "--cflags=<flags>                  Append C Compiler Flags"
	echo "--cxxflags=<flags>                Append C++ Compiler Flags"
	echo "--ldflags=<flags>                 Append Linker Flags"
	echo "--log=<log-level>                 Use the given log level for Plumber logging system"
	echo "--optimization=<level>            Set the level of optimization (from 0 to 4)"
	echo "--gproftools                      Compile code with Google profiling tools"
	echo "--help                            Show this help message"
}

function argv() {
	if [ $# = 2 ] && [ x"$1" = "x--string" ]; then
		echo $2 | sed 's/^[^=]*=\(.*\)$/\1/g'
	else
		realpath $(eval "echo $(echo $1 | sed 's/^[^=]*=\(.*\)$/\1/g')")
	fi
}

function strip() {
	echo $1 | sed 's/^[\t ]*//g' | sed 's/[\t ]*$//g'
}

function need() {
	case ${1} in
		reconfigure )
			reconfigure="yes"
			recompile="yes"
			reinstall="yes"
			;;
		recompile )
			recompile="yes"
			reinstall="yes"
			;;
		reinstall )
			reinstall="yes"
			;;
	esac
}

CC=gcc
CXX=g++
LOG=6
shell=zsh

[ ! -e ${BUILDDIR}/plumber/Makefile ] && need reconfigure
[ ! -e ${BUILDDIR}/plumber/bin/pscript ] && need recompile
[ ! -e ${INSTALLDIR}/bin/pscript ] && need reinstall

function parse_options() {
	for arg in $@
	do
		case ${arg} in
			--real )
				realenv="/";;;
			--real=* )
				realenv="$(argv ${arg})";;;
			--javascript-prebuilt )
				javascript="yes"
				js_prebuilt="http://plumberserver.com/data/plumberv8-prebuild.6.3.0.x64.release.tar.gz"
				need reconfigure;;;
			--javascript-prebuild )
				javascript="yes"
				js_prebuilt="$(argv --string ${arg})"
				need reconfigure
				;;;
			--javascript ) 
				javascript="yes"
				need reconfigure;;;
			--javascript=* )
				javascript="external"
				v8prefix="$(argv --string ${arg})"
				need reconfigure;;;
			--reconfigure )
				cmake_param=""
				need reconfigure;;;
			--reconfigure=* )
				cmake_param="$(argv --string ${arg})"
				need reconfigure;;;
			--recompile )
				need recompile;;;
			--reinstall )
				need reinstall;;;
			--reinstall=* )
				INSTALLDIR="$(argv ${arg})"
				need reconfigure;;;
			--commit=* )
				commit="$(argv --string ${arg})"
				need recompilel;;
			--test )
				runtest="yes";;;
			--remove )
				remove="yes";;;
			--shell=* )
				shell="$(argv --string ${arg})";;;
			--gproftools )
				LIBS=$(strip "${LIBS} -lprofiler")
				CFLAGS=$(strip "${CFLAGS} -DGPROFTOOLS")
				need reconfigure;;;
			--sync )
				sync="yes"
				need recompile;;;
			--cc=* )
				CC="$(argv --string ${arg})"
				need reconfigure;;;
			--cxx=* )
				CXX="$(argv --string ${arg})"
				need reconfigure;;;
			--cflags=* )
				CFLAGS="$(strip "${CFLAGS} $(argv --string ${arg})")"
				need reconfigure;;;
			--cxxflags=* )
				CXXFLAGS="$(strip "${CXXFLAGS} $(argv --string ${arg})")"
				need reconfigure;;;
			--ldflags=* )
				LIBS="$(strip "${LIBS} $(argv --string ${arg})")"
				need reconfigure;;;
			--log=* )
				LOG="$(argv --string ${arg})"
				need reconfigure;;;
			--optimization=[0-5] )
				OPT="$(argv --string ${arg})"
				need reconfigure;;;
			--help )
				print_help
				exit 0;;;
			* )
				echo "Invalid argument ${arg}"
				print_help
				exit 1
		esac
	done
}

parse_options $@

function realenvinfo() {
	echo -ne '\e[33m'
	echo ""
	echo "You are entering real plumber environment at ${realenv}"
	echo "  To quit the environment, please exit current shell"
	echo ""
	echo "  Plumber Version                        `pscript --version  |& grep 'Libplumber' | awk -F': ' '{print $2}'`"
	echo "  Plumber Service Script Interpreter     pscript  at `which pscript`"
	echo "  Plumber Servlet Testbed                pstest   at `which pstest`"
	echo "  Protocol Management Tool               protoman at `which protoman`"
	echo ""
	echo -ne '\e[0m'
}

if [ ! -z "${realenv}" ]
then
	LD_LIBRARY_PATH=${realenv}/lib PATH=${realenv}/bin:${PATH} ENVROOT=${realenv} REPOROOT=`pwd` realenvinfo
	LD_LIBRARY_PATH=${realenv}/lib PATH=${realenv}/bin:${PATH} ENVROOT=${realenv} REPOROOT=`pwd` ${shell} || exit 1
	exit 0
fi

if [ ! -z "${ENVROOT}" ]
then
	echo "You are already in the Isolated Plumber Environment!"
	exit 1
fi

if [ "x${remove}" = "xyes" ]
then
	rm -rf build installed
	exit 0
fi

if [ "x${javascript}" = "xyes" ]
then
	if "x${js_prebuilt}" = "x" ]
	then
		mkdir -p ${BUILDDIR}/plumberv8
		${SOURCEDIR}/plumberv8/buildv8 --configure-name=x64.release --output=${BUILDDIR}/plumberv8/ --prefix=${INSTALLDIR} --install || exit 1
	else
		${SOURCEDIR}/plumberv8/buildv8 --install-only=${js_prebuilt} --prefix=${INSTALLDIR} || exit 1
	fi
	JS_PARAM=(-DPLUMBER_V8_PREFIX=${INSTALLDIR} -Dbuild_language_javascript=yes)
fi

if [ "x${javascript}" = "xexternal" ]
then
	JS_PARAM=(-DPLUMBER_V8_PREFIX=${v8prefix} -Dbuild_language_javascript=yes)
fi

if [ ! -z "${commit}" ]
then
	pushd ${SOURCEDIR}/plumber
	git checkout ${commit} || exit 1
	popd
fi

if [ "x${sync}" = "xyes" ]
then
	pushd ${SOURCEDIR}/plumber
	git pull || exit 1
	popd
fi

if [ "x${reconfigure}" = "xyes" ]
then
	mkdir -p ${BUILDDIR}/plumber || exit 1
	pushd ${BUILDDIR}/plumber
	export O=${OPT} 
	export L=${LOG} 
	export CC=${CC} 
	export CXX=${CXX} 
	export LIBS=${LIBS} 
	export CFLAGS=${CFLAGS} 
	echo "-DCMAKE_INSTALL_PREFIX=${INSTALLDIR}
${cmake_param}
${JS_PARAM}
${SOURCEDIR}/plumber" | xargs cmake 	
	popd
fi

if [ "x${recompile}" = "xyes" ]
then
	pushd ${BUILDDIR}/plumber
	make || exit 1
	popd
fi

if [ "x${runtest}" = "xyes" ]
then
	pushd ${BUILDDIR}/plumber
	make test || exit 1
	popd
fi

if [ "x${reinstall}" = "xyes" ]
then
	pushd ${BUILDDIR}/plumber
	make install || exit 1
	popd
	LD_LIBRARY_PATH=${INSTALLDIR}/lib ${INSTALLDIR}/bin/protoman --update --yes prototypes/*.ptype || exit 1
	LD_LIBRARY_PATH=${INSTALLDIR}/lib sh ${BUILDDIR}/plumber/install-prototype.sh || exit 1
fi

function show_info() {
	echo -ne '\e[33m'
	echo ""
	echo "You are enetring Isolated Plumber Envrionment"
	echo ""
	echo "  To check if you are in the Plumber Isolated Environment, use command whereami"
	echo "  To quit the environment, please exit current shell"
	echo ""
	echo "  Plumber Version                        `pscript --version  |& grep 'Libplumber' | awk -F': ' '{print $2}'`"
	echo "  Plumber Service Script Interpreter     pscript  at `which pscript`"
	echo "  Plumber Servlet Testbed                pstest   at `which pstest`"
	echo "  Protocol Management Tool               protoman at `which protoman`"
	echo ""
	echo -ne '\e[0m'
}

cat > ${INSTALLDIR}/bin/whereami <<EOF
#!/bin/sh
echo "You are under Plumber Isolated Environment at $(pwd), to leave the environment, please exit current shell."
EOF

chmod +x ${INSTALLDIR}/bin/whereami

mkdir -p ${INSTALLDIR}/var/run/plumber

LD_LIBRARY_PATH=${INSTALLDIR}/lib PATH=${INSTALLDIR}/bin:${PATH} ENVROOT=${INSTALLDIR} REPOROOT=`pwd` show_info

LD_LIBRARY_PATH=${INSTALLDIR}/lib PATH=${INSTALLDIR}/bin:${PATH} ENVROOT=${INSTALLDIR} REPOROOT=`pwd` ${shell} || exit 1
