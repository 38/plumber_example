#!/usr/bin/env pscript
/**
 * Copyright (C) 2017, Hao Hou
 **/
/* The main script for the static file server */

// Load the configuration
import("service");
import("servlet");
import("daemon");
import("options");

var template = Options.empty_template();
Options.add_option(template, "--foreground", "-F", "Start the file server in foreground", 0, 0);
Options.add_option(template, "--help", "-h", "Print this help message", 0, 0);
Options.add_option(template, "--tcp-port", "-p", "Set the TCP port", 1, 1);
Options.add_option(template, "--tls-port", "-P", "Set the TLS port", 1, 1);
Options.add_option(template, "--threads", "-t", "The number of worker threads", 1, 1);
Options.add_option(template, "--show-graph", "-S", "Show the service graph and exit", 0, 0);
Options.add_option(template, "--upgrade-http", "-U", "Upgrade HTTP to HTTPS", 0, 0);
options = Options.parse(template, argv);

import("config.pss");

var print_help = function() 
{
	print("The Simple Plumber Static Content Server");
	print("Usage: ", options["program"], " [arguments]");
	print("Arguments:");
	Options.print_help(template);
}

if(len(options["unparsed"]) > 0)
{
	print_help();
	exit(1);
}

if(options["parsed"]["--help"] != undefined)
{
	print_help();
	exit(0);
}

# To redirect the port
if(options["parsed"]["--upgrade-http"] != undefined)
{
	plumber.std.libconf.http.upgrade = 1;
	plumber.std.libconf.http.upgrade_port = read_opt("--tls-port", 4343);
}

proxy_server = {
	RequestParser      := "network/http/parser";
	Rewrite            := "rewrite plumberserver.com:8123 /";
	Proxy              := "network/http/proxy  -P 1024 -p 1024 -T 30";
	ResponseGenerator  := "network/http/render --proxy";

	/* Setup normal logic */
	() -> "input" RequestParser {
		"protocol_data" -> "protocol_data";
		"default" -> "input" Rewrite "output" -> "request" Proxy "response" -> "proxy";
	} ResponseGenerator "output" -> ();

	/* Let's handle the unexpected service error */
	{
		RequestParser    "__error__" -> "500";
		Rewrite          "__error__" -> "500";
		Proxy            "__error__" -> "500";
	} ResponseGenerator;
};

if(options["parsed"]["--foreground"] == undefined)
{
	runtime.daemon.id = "plumber-proxy-server";
	runtime.daemon.admin_group = "docker";
}

if(options["parsed"]["--show-graph"] != undefined)
{
	Service.visualize(proxy_server);
	exit(0);
}

if(options["parsed"]["--foreground"] == undefined && Daemon.ping(runtime.daemon.id))
{
	print("Updating existing daemon");
	Daemon.reload(runtime.daemon.id, proxy_server);
}
else
{
	print("Starting new daemon");
	Service.start(proxy_server);
}
