/**
 * Copyright (C) 2017, Hao Hou 
 **/

/* The fileserver configuration file */

basedir = getcwd() + "/environment";
mime_type_file = basedir + "/mime.types";   //The mime.types file 
server_base_dir = basedir + "/server_files"; //The server base dir
server_base_dir_2 = basedir + "/server_files_2"; //Another base dir, only used by the VHost example

// Make sure the Plumber Standard Service Module, a.k.a PSSM has been loaded
// The PSSM provides a lot of standard framework service, like framework managed
// memory pool, etc.
if (plumber.std == undefined) insmod("pssm");

// Make sure we have loaded the Memory Pipe Module, this is the standard Inter-task
// Communication method we need to use
if (pipe.mem == undefined) insmod("mem_pipe");

// Set the servlet search path, so that the framework will be able to find our servlet 
runtime.servlet.path = getcwd() + "/bin:" + runtime.servlet.path;       // the servlet search path

/* Read the configuration from the commandline param */
var _readopt = function(name, defval) 
{
    if(options == undefined) return defval;
	if(options["parsed"][name] != undefined) 
		return parse_int(options["parsed"][name][0], defval);
	return defval;
}

tcp_port = _readopt("--tcp-port", 8080);
tls_port = _readopt("--tls-port", 4343);
nthreads = _readopt("--threads", 8);

// Change the scheduler cofingurations
scheduler.worker.default_itc_pipe = "pipe.mem";
scheduler.worker.nthreads = nthreads;
scheduler.async.nthreads = 1;

// Setup our TCP module to accept HTTP requests from 8080 port
(function _configure_tcp(port, nthreads)
{
	if (nthreads == 0) return undefined;
	var path = "pipe.tcp.port_" + port;
	if($global[path] == undefined) insmod("tcp_pipe " + port);
	$global[path + ".size"] = 65536;
	$global[path + ".ttl"] = 240;
	$global[path + ".reuseaddr"] = 1;
	/* If there are too many connections, it's possible that the event loop become the bottleneck.
	 * In this case we could add an additional event loop for this port */
	for(var i = 1; i < nthreads; i ++)
		insmod("tcp_pipe " + path);
})(tcp_port, (scheduler.worker.nthreads + 7) / 8);

// Now setup the HTTPS support
if(module.binary.has_tls_pipe == 1)
{
	(function _configue_tls(port)
	{
		var tcp_path = "pipe.tcp.port_" + port;
		var tls_path = "pipe.tls." + tcp_path;
		if ($global[tcp_path] == undefined && $global[tls_path] == undefined)
		{
			// Step1: Start a transporation layer in a slave mode
			insmod("tcp_pipe --slave " + port);
			// Step2: Wrap the transporation layer pipe with the tls_pipe module
			ssl_cert = basedir + "/certs/cert.pem"
			ssl_key  = basedir + "/certs/key.pem"
			insmod("tls_pipe cert=" + ssl_cert + " key=" + ssl_key + " " + tcp_path);
			// Step3: (Optional) Configure the transporation layer
			$global[tcp_path + ".size"] = 65536;
			$global[tcp_path + ".ttl"] = 240;
			$global[tcp_path + ".reuseaddr"] = 1;
			// Step4: (Optional) Configure the TLS module
			//        a) To add a certification to the cert chain
			#pipe.tsl.pipe.tcp.port_4343.extra_cert_chain = "path/to/cert1:path/to/cert2:.....";
			
			//        b) To disable a specified version of TLS/SSL
			$global[tls_path + ".ssl2"] = 0;
			//        c) To enable DHE algorithm, you should provide the DH parameter file, 
			//          which you can get from "openssl dhparam -C <num-of-digits>"
			#pipe.tls.pipe.tcp.port_4343.dhparam = "path/to/dhparam";
			//        f) To enable ECDHE algorithm, you should provide the curve name, 
			//          or set the curve name to auto
			#pipe.tls.pipe.tcp.port_4343.ecdh_curve = "auto";
			//        g) To select a cipher set, you should provide a cipher string defined by openssl
			#pipe.tls.pipe.tcp.port_4343.cipher = "openssl-cipher-string";
			//        h) To enable the ALPN protocol negotiation,you should provide a list of protocol strings in preference order
			$global[tls_path + ".alpn_protos"] = "http/1.1 h2 spdy/3";
		}
	})(tls_port);
}
else print("TLS module is not avaiable in current system, TLS support disabled");
