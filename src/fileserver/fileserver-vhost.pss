#!/usr/bin/env pscript
/**
 * Copyright (C) 2017, Hao Hou
 */

/* The Virtual Hosting Static File Server Example */
import("service");
import("servlet");
import("config");

var get_reader = function(site_list)
{
	var num_sites = len(site_list);

	if(site_list["__default__"] == undefined) 
	{
		print("Site list must have a default site");
		return undefined;
	}
	
	var selector_init_arg = "dataflow/demux";

	for(var site in site_list)
	{
		if(site != "__default__")
			selector_init_arg += " " + site;
	}

	var reader = {
		selector    := selector_init_arg; 

		{
			(path) -> "data";
			(host) -> "cond";
		} selector;

		{
			selector "__error__" -> "in0";
		} error "out" -> (__error__);
	};
	
	var id = 0;
	var outid = 0;
	var fid = 0;
	var pid = 0;
	for(var site in site_list)
	{
		var name = "site_" + id;
		var selector_port = "out" + outid;

		if(site == "__default__") selector_port = "default";
		else outid ++;
		
		Service.add_pipe(reader, "selector", selector_port, "path", name);
		Service.add_pipe(reader, name, "__error__", "in" + (1 + id), "error");

		if(typeof(site_list[site]) == "string")
		{
			/* If this site is just a file server, add the file accessor */
			Service.add_node(reader, name, Servlet.init("filesystem/readfile", {
				"root"          : site_list[site],
				"mime-map-file" : mime_type_file,
				"input-mode"    : "string",
				"output-mode"   : "http"
			}));
			Service.add_pipe(reader, name, "file", "in" + fid, "file_merger");
			fid ++;
		}
		else if(typeof(site_list[site]) == "dict")
		{
			/* If this site is defined by a subgraph, we need to handle this */
			Service.add_node(reader, name, site_list[site]);

			/* If it produces the file output, export it */
			if(site_list[site]["@output@file"] != undefined)
			{
				Service.add_pipe(reader, name, "file", "in" + fid, "file_merger");
				fid ++;
			}

			/* If it produces the proxy output */
			if(site_list[site]["@output@proxy"] != undefined)
			{
				Service.add_pipe(reader, name, "proxy", "in" + pid, "proxy_merger");
				pid ++;
			}
		}

		id++;
	}

	var error_count = 1 + num_sites;

	/* If we do have one or more file output */
	if(fid > 0)
	{
		Service.add_node(reader, "file_merger", "dataflow/firstnonempty " + fid);
		Service.add_out_port(reader, "file", "file_merger", "out");
		Service.add_pipe(reader, "file_merger", "__error__", "in" + (error_count), "error");
		error_count ++;
	}
	else Service.add_out_port(reader, "file", "__dummy__", "__dummy__");

	/* If we do have one or more reverse proxy output */
	if(pid > 0)
	{
		Service.add_node(reader, "proxy_merger", "dataflow/firstnonempty " + pid);
		Service.add_out_port(reader, "proxy", "proxy_merger", "out");
		Service.add_pipe(reader, "proxy_merger", "__error__", "in" + (error_count), "error");
		error_count ++;
	}
	else Service.add_out_port(reader, "proxy", "__dummy__", "__dummy__");

	Service.add_node(reader, "error", "dataflow/firstnonempty " + error_count);

	return reader;
}

var create_service = function(site_list)
{
	print(get_reader(site_list));
	var fileserver = {
		parsereq    := "getpath";
		reader      := get_reader(site_list);
		error       := "dataflow/firstnonempty 2";
		genres      := "network/http/render --gzip --deflate --chunked --proxy";

		/* Parse the request */
		() -> "request" parsereq {
			"path" -> "path";
			"host" -> "host";
		} reader {
			"file"  -> "response";
			"proxy" -> "proxy";
		} genres "output" -> ();
		
		/* Handle the internal error */
		{
			parsereq   "__error__" -> "in0";
			reader     "__error__" -> "in1";
		} error "out" -> "500" genres;
	};

	return fileserver;
}

server = create_service({
	"localhost:8080": server_base_dir,
	"__default__"   : {
		req   := "proxyreq /jenkins http://plumberserver.com:8123/jenkins";
		proxy := "network/http/proxy -P 1024 -p 1024 -T 30";
		read  := Servlet.init("filesystem/readfile", {
			"root"          : server_base_dir,
			"mime-map-file" : mime_type_file,
			"input-mode"    : "string",
			"output-mode"   : "http"
		});
		(path) -> "path" req {
			"request" -> "request" proxy "response" -> (proxy);
			"filepath" -> "path"   read  "file"     -> (file);
		};
		proxy "__error__" -> (__error__);
	}
});

/* dump the visualization graph */
Service.visualize(server);

/* then start the file server */
Service.start(server);
