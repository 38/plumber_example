#!/usr/bin/env pscript
/**
 * Copyright (C) 2017, Hao Hou
 */

/* The Virtual Hosting Static File Server Example */
import("service");
import("servlet");
import("config");
import("options");
import("daemon");

var template = Options.empty_template();
Options.add_option(template, "--foreground", "-F", "Start the file server in foreground", 0, 0);
Options.add_option(template, "--help", "-h", "Print this help message", 0, 0);
Options.add_option(template, "--tcp-port", "-p", "Set the TCP port", 1, 1);
Options.add_option(template, "--tls-port", "-P", "Set the TLS port", 1, 1);
Options.add_option(template, "--threads", "-t", "The number of worker threads", 1, 1);
Options.add_option(template, "--show-graph", "-S", "Show the service graph and exit", 0, 0);
Options.add_option(template, "--upgrade-http", "-U", "Upgrade HTTP to HTTPS", 0, 0);
options = Options.parse(template, argv);

import("config.pss");

var print_help = function() 
{
	print("The Simple Plumber Static Content Server");
	print("Usage: ", options["program"], " [arguments]");
	print("Arguments:");
	Options.print_help(template);
}

if(len(options["unparsed"]) > 0)
{
	print_help();
	exit(1);
}

if(options["parsed"]["--help"] != undefined)
{
	print_help();
	exit(0);
}

# To redirect the port
if(options["parsed"]["--upgrade-http"] != undefined)
{
	plumber.std.libconf.http.upgrade = 1;
	plumber.std.libconf.http.upgrade_port = read_opt("--tls-port", 4343);
}


var create_reverse_proxy = function (remote_host, remote_base)
{
	var ret = {
		Rewrite := "rewrite " + remote_host + " " + remote_base;
		Proxy   := "network/http/proxy -P 1024 -p 1024 -T 30";
		Merger  := "dataflow/firstnonempty 2";

		(request) -> "input" Rewrite "output" -> "request" Proxy "response" -> (response);
		{
			Rewrite "__error__" -> "in0";
			Proxy   "__error__" -> "in1";
		} Merger "out" -> (__error__);
	};

	return ret;
}

var create_server = function (site_list)
{
	var num_sites = len(site_list);

	if(site_list["__default__"] == undefined) 
	{
		print("Site list must have a default site");
		return undefined;
	}

	var init_param = "network/http/parser";
	var id = 0;
	
	var ret = {
		Render := "network/http/render --chunked --proxy";

		() -> "input" Parser "protocol_data" -> "protocol_data" Render "output" -> ();
	};

	for(var key in site_list)
	{
		var port = "site_" + id;

		if(key == "__default__") 
			port = "default";
		else 
			init_param += " --route " + "name:site_" + (id) + ";prefix:" + key;

		if(site_list[key]["type"] == "static")
		{
			Service.add_node(ret, port, Servlet.init("filesystem/readfile", {
				"root"          : site_list[key]["root"],
				"mime-map-file" : mime_type_file,
				"input-mode"    : "http",
				"output-mode"   : "http",
				"range-access"  : undefined,
				"compressable"      : "text/*,application/*javascript*,application/*xml*,application/*json*"   	
			}));

			Service.add_pipe(ret, port, "__error__", "500", "Render");
			Service.add_pipe(ret, "Parser", port, "request", port);
			Service.add_pipe(ret, port, "file", "response", "Render");
		}
		else if(site_list[key]["type"] == "proxy")
		{
			Service.add_node(ret, port, create_reverse_proxy(site_list[key]["host"], site_list[key]["base"]));

			Service.add_pipe(ret, port, "__error__", "500", "Render");
			Service.add_pipe(ret, "Parser", port, "request", port);
			Service.add_pipe(ret, port, "response", "proxy", "Render");
		}
		id ++;
	}

	Service.add_node(ret, "Parser", init_param);

	return ret;
}

var site_list = {
	"__default__": {
		"type": "static",
		"root": server_base_dir 
	},
	"localhost:8080/jenkins": {
		"type": "proxy",
		"host": "plumberserver.com:8123",
		"base": "/jenkins"
	},
	"localhost:4343/" : {
		"type": "static",
		"root": server_base_dir_2
	}
};

fileserver = create_server(site_list);

if(options["parsed"]["--foreground"] == undefined)
{
	runtime.daemon.id = "plumber-file-server";
	runtime.daemon.admin_group = "docker";
}

if(options["parsed"]["--show-graph"] != undefined)
{
	Service.visualize(fileserver);
	exit(0);
}

if(options["parsed"]["--foreground"] == undefined && Daemon.ping(runtime.daemon.id))
{
	print("Updating existing daemon");
	Daemon.reload(runtime.daemon.id, fileserver);
}
else
{
	print("Starting new daemon");
	Service.start(fileserver);
}
