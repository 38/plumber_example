#!/usr/bin/env pscript
/**
 * Copyright (C) 2017, Hao Hou
 **/
/* The main script for the static file server */

// Load the configuration
import("service");
import("daemon");
import("options");

var template = Options.empty_template();
Options.add_option(template, "--foreground", "-F", "Start the file server in foreground", 0, 0);
Options.add_option(template, "--help", "-h", "Print this help message", 0, 0);
Options.add_option(template, "--tcp-port", "-p", "Set the TCP port", 1, 1);
Options.add_option(template, "--tls-port", "-P", "Set the TLS port", 1, 1);
Options.add_option(template, "--threads", "-t", "The number of worker threads", 1, 1);
Options.add_option(template, "--show-graph", "-S", "Show the service graph and exit", 0, 0);
Options.add_option(template, "--upgrade-http", "-U", "Upgrade HTTP to HTTPS", 0, 0);
options = Options.parse(template, argv);

import("config.pss");

var print_help = function() 
{
	print("The Simple Plumber Static Content Server");
	print("Usage: ", options["program"], " [arguments]");
	print("Arguments:");
	Options.print_help(template);
}

if(len(options["unparsed"]) > 0)
{
	print_help();
	exit(1);
}

if(options["parsed"]["--help"] != undefined)
{
	print_help();
	exit(0);
}

# To redirect the port
if(options["parsed"]["--upgrade-http"] != undefined)
{
	plumber.std.libconf.http.upgrade = 1;
	plumber.std.libconf.http.upgrade_port = read_opt("--tls-port", 4343);
}

//define the file server
fileserver = {
	RequestParser      := "getpath";
	PathParser         := "filesystem/parsepath --ext-name";
	MIMEGuesser        := "filesystem/mimetype " + mime_type_file;
	FileReader         := "filesystem/readfile " + server_base_dir;
	ResponseGenerator  := "response";

	/* Setup normal logic */
	() -> "request" RequestParser {
		"path" -> "origin" PathParser {
			"extname" ->  "extname" MIMEGuesser "mimetype" -> "mime";
			"relative" -> "path" FileReader "result" -> "file"
		} ResponseGenerator "output" -> ();

		"redir" -> "file" ResponseGenerator;
	};


	/* What if we got an invalid request */
	RequestParser "error" -> "400" ResponseGenerator;

	/* What if we got an invalid path */
	PathParser "__null__" -> "403" ResponseGenerator;

	/* Let's handle the unexpected service error */
	{
		PathParser    "__error__" -> "500";
		RequestParser "__error__" -> "500";
		MIMEGuesser   "__error__" -> "500";
		FileReader    "__error__" -> "500";
	} ResponseGenerator;
};

if(options["parsed"]["--foreground"] == undefined)
{
	runtime.daemon.id = "plumber-file-server";
	runtime.daemon.admin_group = "docker";
}

if(options["parsed"]["--show-graph"] != undefined)
{
	Service.visualize(fileserver);
	exit(0);
}

if(options["parsed"]["--foreground"] == undefined && Daemon.ping(runtime.daemon.id))
{
	print("Updating existing daemon");
	Daemon.reload(runtime.daemon.id, fileserver);
}
else
{
	print("Starting new daemon");
	Service.start(fileserver);
}
